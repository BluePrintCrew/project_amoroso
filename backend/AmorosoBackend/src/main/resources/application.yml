spring:
  application:
    name: AmorosoBackend
  datasource:
    url: jdbc:mysql://localhost:3306/amoroso
    username: root
    password: 1234
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      ddl-auto: create-drop

    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect

  jwt:
    secret: ${JWT_SECRET} # 환경 변수에서 JWT 비밀 키 참조
    expiration: 3600000

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID} # 환경 변수에서 Google Client ID 참조
            client-secret: ${GOOGLE_CLIENT_SECRET} # 환경 변수에서 Google Client Secret 참조
            redirect-uri: "${app.backend.baseUrl}/oauth2/callback/google"
            scope: email, profile
            authorization-grant-type: authorization_code
          kakao:
            client-id: ${KAKAO_CLIENT_ID} # 환경 변수에서 Kakao Client ID 참조
            client-secret: ${KAKAO_CLIENT_SECRET} # 환경 변수에서 Kakao Client Secret 참조
            redirect-uri: "${app.backend.baseUrl}/oauth2/callback/kakao"
            scope: profile, account_email
            authorization-grant-type: authorization_code
          naver:
            client-id: ${NAVER_CLIENT_ID} # 환경 변수에서 Naver Client ID 참조
            client-secret: ${NAVER_CLIENT_SECRET} # 환경 변수에서 Naver Client Secret 참조
            redirect-uri: "${app.backend.baseUrl}/oauth2/callback/naver"
            scope: name, email
            authorization-grant-type: authorization_code
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

  # 사용자 정의 설정은 (spring 바깥에서 관리할 수 있다)
app:
  image-directory: "./images"
  review-image-directory: "./review-images"
  backend:
    baseUrl: http://localhost:8080
  frontend:
    baseUrl: http://localhost:3000

logging:
  level:
    org.springframework.security: DEBUG
    org.example.amorosobackend: DEBUG
    org.springframework.web: DEBUG

portone:
  key:
