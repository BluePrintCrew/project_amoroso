spring:
  application:
    name: AmorosoBackend
  datasource:
    url: jdbc:mysql://mysql:3306/amoroso
    username: root
    password: 1234
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL8Dialect
        format_sql: true
        use_sql_comments: true
        highlight_sql: true
  jwt:
    secret: ${JWT_SECRET}
    expiration: 3600000
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: 'http://localhost:8080/oauth2/callback/google'
            scope: email, profile
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: 'http://localhost:8080/oauth2/callback/kakao'
            scope: profile_nickname, account_email
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: 'http://localhost:8080/oauth2/callback/naver'
            scope: name, email
            authorization-grant-type: authorization_code
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
  data:
    redis:
      host: redis
      port: 6379

app:
  image-directory: '/app/images'
  review-image-directory: '/app/review-images'
  backend:
    baseUrl: http://localhost:8080
  frontend:
    baseUrl: http://localhost:3000

logging:
  level:
    org.springframework.security: INFO
    org.example.amorosobackend: DEBUG
    org.springframework.web: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# PortOne 결제 설정 (테스트용)
iamport:
  api_key: 7614753647502602
  api_secret: VdmdKXmTMjY49rf5ajnXSNBSHAZjZusdOpiScN40sGOsNdtTpbc1Kaxe1E90T7rgvEcWNYBDKqJVSFcr

portone:
  store_id: iamporttest_3
  secret_key: test_sk_d26DlbXAaV0xQbpa7y1VqY50Q9RB
  client_key: test_ck_lpP2YxJ4K877JAdv7KX8RGZwXLOb

server:
  forward-headers-strategy: native

business:
  validation:
    api:
      key: ${BUSINESS_VALIDATION_API_KEY}

ecommerce:
  validation:
    api:
      key: ${ECOMMERCE_API_KEY}

solapi:
  api:
    key: ${SOLAPI_API_KEY}
    secret: ${SOLAPI_API_SECRET}

management:
  endpoints:
    web:
      exposure:
        include: health,info
  endpoint:
    health:
      show-details: always